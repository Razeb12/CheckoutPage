{"remainingRequest":"C:\\Users\\Francis\\OneDrive\\Pictures\\New folder\\CheckoutPage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Francis\\OneDrive\\Pictures\\New folder\\CheckoutPage\\src\\components\\HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"C:\\Users\\Francis\\OneDrive\\Pictures\\New folder\\CheckoutPage\\src\\components\\HelloWorld.vue","mtime":1613626586604},{"path":"C:\\Users\\Francis\\OneDrive\\Pictures\\New folder\\CheckoutPage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Francis\\OneDrive\\Pictures\\New folder\\CheckoutPage\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Francis\\OneDrive\\Pictures\\New folder\\CheckoutPage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Francis\\OneDrive\\Pictures\\New folder\\CheckoutPage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}